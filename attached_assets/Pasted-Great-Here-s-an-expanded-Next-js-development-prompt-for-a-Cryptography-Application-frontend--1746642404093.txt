Great! Here's an expanded **Next.js development prompt** for a **Cryptography Application frontend** with **multiple pages** and a **rich set of UI components**, ensuring a complex, beautiful, and user-friendly interface.

---

### üîê **Prompt: Advanced Cryptography Frontend in Next.js**

> Build a **professional, secure, and scalable frontend** for a **Cryptography Application** using **Next.js 14+ (App Router)** with **Tailwind CSS** or **shadcn/ui**. The UI should resemble a modern SaaS dashboard and be tailored for both technical and non-technical users. It must feature **complex, interactive UI/UX patterns**, multiple pages, reusable components, and **responsive design** optimized for large-screen navigation.

---

### ‚úÖ **Pages & Features:**

#### 1. **Home Dashboard (`/dashboard`)**

* Welcome message, quick stats, recent cryptographic activity
* Summary cards (e.g., Total Encrypted Files, Keys Created Today)
* Charts (e.g., Pie/Bar for algo usage)
* Announcements or alerts

#### 2. **Encryption Tools (`/encryption`)**

* Select algorithm (AES, RSA, Blowfish, etc.)
* Input/output text areas or file upload
* Key input (optional or auto-generated)
* Real-time encryption preview
* Export/download result

#### 3. **Decryption Tools (`/decryption`)**

* Mirror of encryption tool with input validation
* Supports drag-and-drop encrypted files

#### 4. **Hashing Utilities (`/hashing`)**

* Text input for SHA-256, SHA-1, MD5, etc.
* Copy to clipboard button
* Side-by-side hash comparison
* Optional "rainbow table" lookup (frontend simulated)

#### 5. **Key Generator (`/key-generator`)**

* Generate symmetric/asymmetric key pairs
* Toggle for key length/curve type
* Public/private key display + download buttons

#### 6. **Digital Signatures (`/digital-signature`)**

* Upload document or text input
* Choose algorithm (e.g., RSA-SHA256, ECDSA)
* Generate & verify signature
* Signature result shown in modal

#### 7. **Settings (`/settings`)**

* Theme switcher (light/dark/system)
* Language selector (i18n-ready)
* User preferences (e.g., default algorithm)
* Auto-clear data toggle

#### 8. **Logs & History (`/logs`)**

* Table of previous operations
* Filter by type (encryption, keygen, etc.)
* Date range picker
* Option to export as CSV/JSON

#### 9. **Help & Documentation (`/help`)**

* How-to-use guides with images or videos
* FAQ accordion
* Contact form

#### 10. **About (`/about`)**

* Mission, cryptography ethics, licensing
* Developer credits

---

### üß© **Reusable Components:**

* `SidebarNav.tsx` ‚Äì collapsible navigation with active highlighting
* `Topbar.tsx` ‚Äì app name, user avatar, theme switcher
* `AlgoSelectDropdown.tsx` ‚Äì algorithm selection with icons
* `FileUploader.tsx` ‚Äì drag & drop and click-to-upload with preview
* `CodeBlock.tsx` ‚Äì syntax-highlighted key/output area with copy button
* `StatCard.tsx` ‚Äì metric card for dashboard
* `Toast.tsx` ‚Äì notification popup (success/error/info)
* `Modal.tsx` ‚Äì for confirm actions, previews
* `Switch.tsx` ‚Äì for toggles in settings
* `DataTable.tsx` ‚Äì log and history display
* `ThemeToggle.tsx` ‚Äì sun/moon icon switcher
* `LanguageSelector.tsx` ‚Äì dropdown for locale selection

---

### ‚öôÔ∏è **Development Tools & Libraries:**

* **Next.js App Router** with layouts
* **Tailwind CSS** or **shadcn/ui** (preferred)
* **React Hook Form** or **Formik** for form handling
* **Zod** for schema validation
* **Framer Motion** for animations
* **Recharts** or **React Chart.js** for dashboard charts
* **React Toastify** or **Sonner** for notifications
* **Next-i18next** or **LinguiJS** for internationalization
* **Next Auth** (optional, if user login needed)

---

Would you like me to scaffold the actual **folder structure** or generate boilerplate code for one of these pages to get you started?
